#pragma once
#include "../Model/Model.h"
#include "../Model/FbxModelManager.h"
#include "../Graphics/Graphics.h"
#include "../Resource/ResourceManager.h"
#include "./Lemur/Input/Mouse.h"
#include <d3d11.h>
#include <wrl.h>
#include <directxmath.h>
#include <vector>
#include <unordered_map>
#include <string>
#include <fbxsdk.h>

class Character
{
public:
    Character() {};
    virtual ~Character() {}

    // 描画設定
    void Render(float scale, ID3D11PixelShader* replaced_pixel_shader);
    void Render(float scale, ID3D11PixelShader** replaced_pixel_shader);

    virtual void DrawDebugGUI() {};
    virtual void DrawDebugPrimitive() {};

    //---------Getter--------------------------------------------------------------------------
    
    // モデルの数値
    const DirectX::XMFLOAT3& GetPosition() const { return position; }                       // 位置
    const DirectX::XMFLOAT3& GetAngle() const { return rotation; }                          // 回転
    const DirectX::XMFLOAT3& GetScale() const { return scale; }                             // スケール
    const float& GetScaleFactor() const { return scaleFactor; }                             // スケールファクター
    const float GetRadius() const { return radius; }                                        // 半径
    const float GetHeight() const { return height; }                                        // 高さ
    const DirectX::XMFLOAT4& GetColor()const { return material_color; }                     // 色
    const FbxModelManager* GetModel()const { return model.get(); }                          // モデル

    // ステータス
    const int GetHealth() const { return health; }                                          // HP
    const int GetMaxHealth() const { return max_health; }                                   // MaxHP
    const float GetAttackCollisionRange()const { return attack_collision_range; }           // 攻撃当たり判定
    const bool IsGround() const { return isGround; }                                        // 設置判定

    // アニメーション
    const bool GetEndAnimation()const { return end_animation; }                             // アニメーション終了フラグ
    const int GetFrameIndex()const { return frame_index; }                                  // アニメーションフレーム
    const std::vector<Animation>* GetAnimation()const { return model->GetAnimation(); };    // アニメーションデータ


    //---------Setter--------------------------------------------------------------------------
    // モデルの数値
    void SetPosition(const DirectX::XMFLOAT3& position) { this->position = position; }      // 位置
    void SetPosition(const float pos_x, const float pos_y, const float pos_z) { position.x = pos_x, position.y = pos_y, position.z = pos_z; }
    void SetAngle(const DirectX::XMFLOAT3& rotation) { this->rotation = rotation; }         // 回転
    void SetScale(const DirectX::XMFLOAT3& scale) { this->scale = scale; }                  // スケール
    void SetScaleFactor(const float scaleFactor) { this->scaleFactor = scaleFactor; }       // スケールファクター
    void SetModel(std::shared_ptr<FbxModelManager> Model) { this->model = Model; }          // モデル
    void SetPixelShader(ID3D11PixelShader* ps) { pixelShader = ps; }                        // ピクセルシェーダー    
    void SetAnimCalcRate(const float calc_rate_) { anim_calc_rate = calc_rate_; }           // アニメーションの再生速度倍率


    // ダメージを与える
    bool ApplyDamage(int damage);

protected:
    // アニメーションの切り替え
    void SetAnimationIndex(int index, const bool& loop = false)
    {
        frame_index = 0;
        animation_tick = 0;
        animation_index = index;
        end_animation = false;
        animation_loop_flag = loop;

        animation_blend_time = 0.0f;
        animation_blend_seconds = 1.0f;
    } 
   
    // 移動処理
    void Move(float vx, float vz, float speed);
    // 方向転換
    void Turn(float elapsedTime, float vx, float vz, float speed);

    // 速力更新
    void UpdateVelocity(float elapsedTime);

    // ヒットストップする(秒)
    void HitStopON(float hit_stop_time_);

    // ジャンプ処理
    void Jump(float speed);


    // 着地した時に呼ばれる
    virtual void OnLanding() {};

    // ダメージを受けたときに呼ばれる
    virtual void OnDamage() {}

    // 死亡した時に呼ばれる
    virtual void OnDead() {}

public:
    void UpdateScale() {
        scale.x = scale.y = scale.z = scaleFactor;
    }

    // 垂直速力更新処理
    void UpdataVerticalVelocity(float elapsedFrame);

    // 垂直移動更新処理
    void UpdateVerticalMove(float elapsedTime);

    // 水平速力更新処理
    void UpdataHorizontalVelocity(float elapsedFrame);

    // 水平移動更新処理
    void UpdateHorizontalMove(float elapsedTime);

    // ヒットストップの計算
    void HitStopCalc();

    // 行列の更新処理
    void UpdateTransform();

    // 無敵時間更新
    void UpdateInvincibleTimer(float elapsedTime);

public:
    Animation::keyframe keyframe{};
    /* 攻撃、HP関係はスキルとかギャンブルとかで変動する機会多いから
     * 妥協でパブリックな。*/
    int     max_health = 5; // 最大健康状態
    int     health = max_health; // 健康状態
    bool    death = false;

    //基礎攻撃力
    int attack_power = 0;
    // モーション値(○倍)
    float motion_value = 1.0f;

    // 攻撃間隔
    float attack_interval = 0.0f;

    // 基礎防御力
    float defense_power = 0;

    // スピードパラメータ
    float speed_power = 10.0f;

    // 攻撃当たり判定するか
    bool attack_collision_flag = false;

    bool animStop = false;

    Microsoft::WRL::ComPtr<ID3D11PixelShader> PS;

public:
    void UpdateAnimation(float elapsedTIme);
    void UpdateBlendRate(float blendRate, const float& elapsedTime);
    // アニメーション再生中か[17]
    bool IsPlayAnimation()const;
    // 現在のアニメーション番号
    bool animation_loop_flag = true;
    float animation_blend_time = 0.0f;
    float animation_blend_seconds = 0.0f;

    DirectX::XMFLOAT4X4 World;

    DirectX::XMFLOAT3 velocity = { 0, 0, 0 };  // 速度
    DirectX::XMFLOAT3 position = { 0, 0, 0 };  // 位置
    DirectX::XMFLOAT3 scale = { 1.0f, 1.0f, 1.0f }; // スケール
    DirectX::XMFLOAT3 rotation = { 0, 0, 0 }; //　回転
    DirectX::XMFLOAT4 material_color = { 1, 1, 1, 1 }; // 色

    DirectX::XMFLOAT3 direction = { 0,0,1 };// 方向
    DirectX::XMFLOAT4X4 transform = { 1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1 };// 行列

    float   invincibleTimer = 1.0f; // 無敵時間
    float   maxMoveSpeed = 5.0f; // 最大速度
    float   moveVecX = 0.0f; // X方向移動
    float   moveVecZ = 0.0f; // Z方向移動
    float   friction = 0.7f; // 摩擦力
    float   acceleration = 1.5f; // 加速力
    float   gravity = -1.0f; // 重力
    float   radius = 1.0f; // 半径
    float   height = 0.0f; // 高さ 

    float   scaleFactor = 1.0f;

    float	airControl = 0.3f; // 空気抵抗

    bool    isGround = false; // 着地フラグ

    // 攻撃当たり判定する半径
    float attack_collision_range = 0.3f;

    // 歩きの速さ(スピードパラメータがあるからベースの速度は激おそ)
    float walk_speed = 0.1f;


    float animation_tick = 0; // アニメーション
    std::shared_ptr<FbxModelManager> model;

    // アニメーション用(メンバ化しときました。これに相当する変数とかもしあったらごめん)
    //名前をclip_indexから変えました。
    int animation_index = 0;
    int frame_index = 0;

    // ルートモーションで使うから作りました。 by:tomy
    int root_motion_node_index = -1;

    // アニメーション終了フラグ
    bool end_animation = false;


    // ヒットストップする時間
    float hit_stop_time;
    // ヒットストップ経過時間
    float hit_stop_timer;
    // ヒットストップしてるか
    bool is_hit_stop = false;

    // この値をいじればヒットストップできる
    float hit_stop_rate = 1.0f;
    // アニメーションの再生速度を制御していろいろな表現をする奴
    float anim_calc_rate = 1.0f;


    Mouse* mouse;


    ID3D11PixelShader* pixelShader = nullptr; // シェーダー
};